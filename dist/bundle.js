/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/base.ts":
/*!*********************!*\
  !*** ./src/base.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Object\": () => (/* binding */ Object)\n/* harmony export */ });\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\n\nclass Object {\n    constructor(mass, position, rotation = 0) {\n        this.clone = () => {\n            let clone = new Object(this.mass, this.position.copy(), this.rotation);\n            clone.velocity = this.velocity.copy();\n            clone.angularVelocity = this.angularVelocity;\n            return clone;\n        };\n        this.render = (ctx) => {\n        };\n        this.getType = () => \"all\";\n        this.voltageAt = (pos) => {\n            return 0;\n        };\n        this.fieldAt = (pos) => {\n            return _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].origin();\n        };\n        this.momentOfInertia = () => {\n            return 0;\n        };\n        this.incrementPosition = (dt) => {\n            this.position.x += this.velocity.x * dt;\n            this.position.y += this.velocity.y * dt;\n            this.rotation += this.angularVelocity * dt;\n            if (this.rotation > Math.PI)\n                this.rotation -= 2 * Math.PI;\n            if (this.rotation < -Math.PI)\n                this.rotation += 2 * Math.PI;\n            if (this.angularVelocity != 0)\n                this.updateRotation();\n            if (this.velocity.x != 0 || this.velocity.y != 0)\n                this.updatePosition();\n        };\n        this.updatePosition = () => {\n        };\n        this.updateRotation = () => {\n        };\n        this.applyForces = (dt, force, torque) => {\n            this.incrementPosition(dt);\n            this.velocity.add(_vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].multiply(force, dt / this.mass));\n        };\n        this.decompose = (detail) => {\n            return [this];\n        };\n        this.velocity = new _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0, 0);\n        this.position = position;\n        this.mass = mass;\n        this.rotation = rotation;\n        this.angularVelocity = 0;\n    }\n    distanceFrom(pos) {\n        return _vector__WEBPACK_IMPORTED_MODULE_0__[\"default\"].subtract(this.position, pos).magnitude();\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/base.ts?");

/***/ }),

/***/ "./src/charges/finite_line.ts":
/*!************************************!*\
  !*** ./src/charges/finite_line.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FiniteLine)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ \"./src/base.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scene */ \"./src/scene.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/* harmony import */ var _point_charge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./point_charge */ \"./src/charges/point_charge.ts\");\n\n\n\n\n\nclass FiniteLine extends _base__WEBPACK_IMPORTED_MODULE_0__.Object {\n    constructor(chargeDensity, mass, position, rotation, length) {\n        super(mass, position, rotation);\n        this.fieldAt = (pos) => {\n            let deltaLine = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.endPoint, this.startPoint);\n            let deltaPoint = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, this.startPoint);\n            let pointOntoLine = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].scalarProject(deltaPoint, deltaLine);\n            let pointOntoNormal = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].scalarProject(deltaPoint, this.normal);\n            let xStart = -pointOntoLine;\n            let xEnd = this.length - pointOntoLine;\n            let rInvStart = 1 / Math.sqrt(Math.pow(xStart, 2) + Math.pow(pointOntoNormal, 2));\n            let rInvEnd = 1 / Math.sqrt(Math.pow(xEnd, 2) + Math.pow(pointOntoNormal, 2));\n            let xF = rInvEnd - rInvStart;\n            let yF = (xEnd * rInvEnd - xStart * rInvStart) / pointOntoNormal;\n            let fieldVec = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](xF, yF), _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * this.chargeDensity);\n            fieldVec.rotateByVector(deltaLine);\n            return fieldVec;\n        };\n        this.voltageAt = (pos) => {\n            let relPos = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, this.position);\n            let g = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dot(relPos, new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.cos(this.rotation), Math.sin(this.rotation)));\n            return _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * Math.sign(g) * this.chargeDensity * Math.log((_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, this.startPoint) + Math.abs(g) + Math.sign(g) * this.length / 2) / (_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, this.endPoint) + Math.abs(g) - Math.sign(g) * this.length / 2));\n        };\n        this.clone = () => {\n            let clone = new FiniteLine(this.chargeDensity, this.mass, this.position.copy(), this.rotation, this.length);\n            clone.velocity = this.velocity.copy();\n            clone.angularVelocity = this.angularVelocity;\n            return clone;\n        };\n        this.updatePosition = () => {\n            let dir = new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.cos(this.rotation), Math.sin(this.rotation));\n            this.startPoint = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.position, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(dir, -this.length / 2));\n            this.endPoint = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.position, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(dir, this.length / 2));\n        };\n        this.updateRotation = () => {\n            this.normal = new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](-Math.sin(this.rotation), Math.cos(this.rotation));\n            this.updatePosition();\n        };\n        this.momentOfInertia = () => {\n            return this.mass * Math.pow(this.length, 2) / 12;\n        };\n        this.getType = () => \"finite_line\";\n        this.distanceFrom = (pos) => {\n            if (this.length == 0)\n                return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, this.position);\n            let t = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dot(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, this.endPoint), _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.startPoint, this.endPoint)) / this.length / this.length;\n            t = Math.max(0, Math.min(1, t));\n            return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.endPoint, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.startPoint, this.endPoint), t)));\n        };\n        this.render = (ctx) => {\n            ctx.lineCap = \"round\";\n            let halfLen = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.cos(this.rotation), Math.sin(this.rotation)), this.length / 2);\n            let start = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.position, halfLen);\n            let end = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.position, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(halfLen, -1));\n            let lineThickness = Math.abs(this.chargeDensity) * 50 / (Math.abs(this.chargeDensity) + 3);\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = lineThickness + 6;\n            ctx.beginPath();\n            ctx.moveTo(start.x * 100, start.y * 100);\n            ctx.lineTo(end.x * 100, end.y * 100);\n            ctx.stroke();\n            ctx.closePath();\n            ctx.strokeStyle = _scene__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getChargeColor(this.chargeDensity);\n            ctx.lineWidth = lineThickness;\n            ctx.beginPath();\n            ctx.moveTo(start.x * 100, start.y * 100);\n            ctx.lineTo(end.x * 100, end.y * 100);\n            ctx.stroke();\n            ctx.closePath();\n        };\n        this.decompose = (detail) => {\n            let objs = [];\n            let step = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.endPoint, this.startPoint), 1 / detail);\n            let charge = this.chargeDensity / detail;\n            for (let i = 0; i < detail; i++) {\n                objs.push(new _point_charge__WEBPACK_IMPORTED_MODULE_4__[\"default\"](charge, this.mass / detail, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.startPoint, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(step, i))));\n            }\n            return objs;\n        };\n        this.chargeDensity = chargeDensity;\n        this.length = length;\n        this.updateRotation();\n        this.updatePosition();\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/charges/finite_line.ts?");

/***/ }),

/***/ "./src/charges/infinite_plane.ts":
/*!***************************************!*\
  !*** ./src/charges/infinite_plane.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InfinitePlane)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ \"./src/base.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scene */ \"./src/scene.ts\");\n\n\n\n\nclass InfinitePlane extends _base__WEBPACK_IMPORTED_MODULE_0__.Object {\n    constructor(chargeDensity, mass, position, rotation = 0) {\n        super(mass, position, rotation);\n        this.fieldAt = (pos) => {\n            let deltaPos = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, this.position);\n            return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.normal, Math.sign(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dot(this.normal, deltaPos)) * 2 * this.chargeDensity * _constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].K * Math.PI);\n        };\n        this.clone = () => {\n            let clone = new InfinitePlane(this.chargeDensity, this.mass, this.position.copy(), this.rotation);\n            clone.velocity = this.velocity.copy();\n            clone.angularVelocity = this.angularVelocity;\n            return clone;\n        };\n        this.getType = () => \"infinite_plane\";\n        this.distanceFrom = (pos) => {\n            let deltaPos = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, this.position);\n            return Math.abs(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dot(deltaPos, this.normal));\n        };\n        this.updateRotation = () => {\n            this.normal = new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](-Math.sin(this.rotation), Math.cos(this.rotation));\n        };\n        this.momentOfInertia = () => {\n            return Infinity;\n        };\n        this.render = (ctx) => {\n            let lineWidth = Math.abs(this.chargeDensity) * 6 / (Math.abs(this.chargeDensity) + 0.03) + 2;\n            ctx.beginPath();\n            let dir = new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](50 * Math.cos(this.rotation), 50 * Math.sin(this.rotation));\n            ctx.moveTo((this.position.x + dir.x) * 100, (this.position.y + dir.y) * 100);\n            ctx.lineTo((this.position.x - dir.x) * 100, (this.position.y - dir.y) * 100);\n            ctx.lineWidth = lineWidth + 6;\n            ctx.strokeStyle = \"black\";\n            ctx.stroke();\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = _scene__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getChargeColor(this.chargeDensity);\n            ctx.stroke();\n            ctx.closePath();\n        };\n        this.decompose = (detail) => {\n            throw \"Infinite Plane cannot be decomposed\";\n        };\n        this.chargeDensity = chargeDensity;\n        this.updateRotation();\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/charges/infinite_plane.ts?");

/***/ }),

/***/ "./src/charges/point_charge.ts":
/*!*************************************!*\
  !*** ./src/charges/point_charge.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PointCharge)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ \"./src/base.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../scene */ \"./src/scene.ts\");\n\n\n\n\nclass PointCharge extends _base__WEBPACK_IMPORTED_MODULE_0__.Object {\n    constructor(charge, mass, position) {\n        super(mass, position);\n        this.fieldAt = (pos) => {\n            return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].inverseSquareField(pos, this.position), _constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].K * this.charge);\n        };\n        this.voltageAt = (pos) => {\n            let distance = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, this.position);\n            return ((_constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].K * this.charge) / distance);\n        };\n        this.clone = () => {\n            let clone = new PointCharge(this.charge, this.mass, this.position.copy());\n            clone.velocity = this.velocity.copy();\n            clone.angularVelocity = this.angularVelocity;\n            return clone;\n        };\n        this.getType = () => \"point_charge\";\n        this.render = (ctx) => {\n            ctx.fillStyle = _scene__WEBPACK_IMPORTED_MODULE_3__[\"default\"].getChargeColor(this.charge);\n            ctx.strokeStyle = \"black\";\n            ctx.lineWidth = 3;\n            ctx.beginPath();\n            ctx.arc(this.position.x * 100, this.position.y * 100, 40, 0, 2 * Math.PI);\n            ctx.fill();\n            ctx.stroke();\n            ctx.closePath();\n            ctx.fillStyle = \"white\";\n            ctx.strokeStyle = \"none\";\n            ctx.fillText(this.charge.toString() + \"μC\", this.position.x * 100, this.position.y * 100);\n        };\n        this.charge = charge;\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/charges/point_charge.ts?");

/***/ }),

/***/ "./src/charges/triangle.ts":
/*!*********************************!*\
  !*** ./src/charges/triangle.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Triangle)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ \"./src/base.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n/* harmony import */ var _point_charge__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point_charge */ \"./src/charges/point_charge.ts\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scene */ \"./src/scene.ts\");\n\n\n\n\n\nclass Triangle extends _base__WEBPACK_IMPORTED_MODULE_0__.Object {\n    constructor(mass, position, rotation, chargeDensity, p1, p2, p3) {\n        super(mass, position, rotation);\n        this.voltageAt = (pos) => {\n            let p = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(pos, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.position, -1));\n            p.rotate(this.rotation);\n            p.y -= this.tip.y / 2;\n            let halfWidth = this.halfWidth;\n            let height = this.tip.y * 3 / 2;\n            let ox = this.tip.x;\n            let a = height / halfWidth;\n            let b = p.x * a - p.y;\n            let c = height / (ox - halfWidth);\n            let d = (halfWidth * height - p.x * height - p.y * halfWidth + ox * p.y) / (halfWidth - ox);\n            let l0 = -halfWidth - p.x;\n            let l1 = ox - p.x;\n            let l2 = halfWidth - p.x;\n            const f1 = (x) => -p.y * Math.log(Math.abs(-p.y * Math.sqrt(x * x + p.y * p.y) + Math.abs(p.y) * x)) + x * Math.asinh(-p.y / x);\n            const f2 = (x, a, b) => a * (Math.sqrt(Math.pow((a + x / b), 2) + 1) - 1) / (a + x / b);\n            const f3 = (x, a, b) => {\n                let t = f2(x, a, b);\n                let l = Math.sqrt(a * a + 1);\n                return x * Math.asinh(a + b / x) + b / l * Math.log(Math.abs((t + l + 1) / (t - l + 1)));\n            };\n            return _constants__WEBPACK_IMPORTED_MODULE_2__[\"default\"].K * this.chargeDensity * (f3(l1, a, b) - f3(l0, a, b) + f3(l2, c, d) - f3(l1, c, d) + f1(l0) - f1(l2));\n        };\n        this.fieldAt = (pos) => {\n            return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].origin();\n        };\n        this.distanceFromFiniteLine = (pos, p1, p2) => {\n            let len = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(p1, p2);\n            let t = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].dot(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(pos, p2), _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(p1, p2)) / len / len;\n            t = Math.max(0, Math.min(1, t));\n            return _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(p2, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(p1, p2), t)));\n        };\n        this.distanceFrom = (pos) => {\n            let translatedPosition = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(pos, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.position, -1));\n            translatedPosition.rotate(-this.rotation);\n            if (this.pointInside(translatedPosition))\n                return 0;\n            return Math.min(this.distanceFromFiniteLine(translatedPosition, this.points[0], this.points[1]), this.distanceFromFiniteLine(translatedPosition, this.points[1], this.points[2]), this.distanceFromFiniteLine(translatedPosition, this.points[2], this.points[0]));\n        };\n        this.clone = () => {\n            return new Triangle(this.mass, this.position.copy(), this.rotation, this.chargeDensity, this.points[0].copy(), this.points[1].copy(), this.points[2].copy());\n        };\n        this.getType = () => \"triangle_charge\";\n        this.updateRotation = () => {\n        };\n        this.updatePosition = () => {\n        };\n        this.render = (ctx) => {\n            ctx.save();\n            ctx.fillStyle = _scene__WEBPACK_IMPORTED_MODULE_4__[\"default\"].getChargeColor(this.chargeDensity);\n            ctx.beginPath();\n            ctx.translate(this.position.x * 100, this.position.y * 100);\n            ctx.rotate(this.rotation);\n            ctx.moveTo(this.points[0].x * 100, this.points[0].y * 100);\n            ctx.lineTo(this.points[1].x * 100, this.points[1].y * 100);\n            ctx.lineTo(this.points[2].x * 100, this.points[2].y * 100);\n            ctx.fill();\n            ctx.closePath();\n            ctx.restore();\n        };\n        this.decompose = (detail) => {\n            let triNumber = 3;\n            let i = 3;\n            for (; triNumber < detail; i++)\n                triNumber += i;\n            const sideLen = i - 2;\n            let charge = this.chargeDensity / triNumber;\n            let unit1 = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.points[1], this.points[0]), 1 / sideLen);\n            let unit2 = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].subtract(this.points[2], this.points[0]), 1 / sideLen);\n            let objs = [];\n            for (let x = 0; x <= sideLen; x++) {\n                for (let y = 0; y <= sideLen - x; y++) {\n                    objs.push(new _point_charge__WEBPACK_IMPORTED_MODULE_3__[\"default\"](charge, 1, _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.points[0], _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(unit1, x), _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(unit2, y)))));\n                }\n            }\n            objs.forEach(obj => obj.position.rotate(this.rotation));\n            objs.forEach(obj => obj.position.add(this.position));\n            return objs;\n        };\n        this.points = [p1, p2, p3];\n        this.chargeDensity = chargeDensity;\n        let d1 = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(p1, p2);\n        let d2 = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(p2, p3);\n        let d3 = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(p3, p1);\n        let hypot = 2, hypot2 = 0, tip = 1;\n        if (d1 >= d2 && d1 >= d3)\n            hypot = 0, hypot2 = 1, tip = 2;\n        else if (d2 >= d1 && d2 >= d3)\n            hypot = 1, hypot2 = 2, tip = 0;\n        let hypotVec = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this.points[hypot], _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(this.points[hypot2], -1));\n        this.halfWidth = hypotVec.magnitude() / 2;\n        let COM = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(_vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(p1, p2), p3), 1 / 3);\n        this.position.add(COM);\n        let negCOM = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].multiply(COM, -1);\n        this.points.forEach(p => p.add(negCOM));\n        let adjustmentRotation = Math.atan2(hypotVec.y, hypotVec.x);\n        this.points.forEach(p => p.rotate(adjustmentRotation));\n        if (this.points[tip].y < 0) {\n            adjustmentRotation -= Math.PI;\n            this.points.forEach(p => p.rotate(Math.PI));\n        }\n        this.rotation -= adjustmentRotation;\n        this.tip = this.points[tip];\n    }\n    pointInside(pos) {\n        let s = (this.points[0].x - this.points[2].x) * (pos.y - this.points[2].y) - (this.points[0].y - this.points[2].y) * (pos.x - this.points[2].x);\n        let t = (this.points[1].x - this.points[0].x) * (pos.y - this.points[0].y) - (this.points[1].y - this.points[0].y) * (pos.x - this.points[0].x);\n        if ((s < 0) != (t < 0) && s != 0 && t != 0)\n            return false;\n        let d = (this.points[2].x - this.points[1].x) * (pos.y - this.points[1].y) - (this.points[2].y - this.points[1].y) * (pos.x - this.points[1].x);\n        return d == 0 || (d < 0) == (s + t <= 0);\n    }\n}\nwindow.Triangle = Triangle;\n\n\n//# sourceURL=webpack://interactive-em/./src/charges/triangle.ts?");

/***/ }),

/***/ "./src/conductors/conductor.ts":
/*!*************************************!*\
  !*** ./src/conductors/conductor.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Conductor)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base */ \"./src/base.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n/* harmony import */ var _charges_point_charge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../charges/point_charge */ \"./src/charges/point_charge.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\n\n\n\n\nclass Conductor extends _base__WEBPACK_IMPORTED_MODULE_0__.Object {\n    constructor(mass, position, rotation, points, sphereSize, scene, netCharge = 0) {\n        super(mass, position, rotation);\n        this.updateWorldSpace = () => {\n            let rotationMatrix = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rotationMatrix(this.rotation);\n            this.worldSpacePoints = this.points.map((point) => {\n                let out = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].transform(point, rotationMatrix);\n                out.add(this.position);\n                return out;\n            });\n        };\n        this.updateRotation = () => {\n            this.updateWorldSpace();\n            this.conduct();\n        };\n        this.updatePosition = () => {\n            this.updateWorldSpace();\n            this.conduct();\n        };\n        this.decompose = (detail) => {\n            return this.worldSpacePoints.map((point, i) => new _charges_point_charge__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.charges[i], 1, point));\n        };\n        this.voltageAt = (pos) => {\n            let volts = 0;\n            for (let i = 0; i < this.points.length; i++) {\n                volts += _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * this.charges[i] / _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(this.worldSpacePoints[i], this.points[i]);\n            }\n            return volts;\n        };\n        this.fieldAt = (pos) => {\n            let field = new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0);\n            for (let i = 0; i < this.points.length; i++) {\n                let rhat = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].rHat(pos, this.worldSpacePoints[i]);\n                let dist = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(pos, this.worldSpacePoints[i]);\n                let scale = _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * this.charges[i] / (dist * dist);\n                field.add(new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](rhat.x * scale, rhat.y * scale));\n            }\n            return field;\n        };\n        this.conduct = () => {\n            let volts = this.worldSpacePoints.map((point) => this.sceneRef.voltageAt(point, this));\n            let updateVoltage = (i, deltaQ) => {\n                for (let x = 0; x < i; x++)\n                    volts[x] += _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * deltaQ / this.distanceCache[i][x];\n                for (let x = i + 1; x < volts.length; x++)\n                    volts[x] += _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * deltaQ / this.distanceCache[i][x];\n            };\n            for (let i = 0; i < this.points.length; i++) {\n                for (let y = i + 1; y < this.points.length; y++) {\n                    let dist = this.distanceCache[i][y];\n                    volts[y] += _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * this.charges[i] / dist;\n                    volts[i] += _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K * this.charges[y] / dist;\n                }\n            }\n            for (let i = 0; i < this.points.length; i++) {\n                volts[i] += this.voltageCoef * this.charges[i];\n            }\n            const maxIterations = 100;\n            let iterations = 0, keepGoing = true;\n            while (keepGoing && iterations < maxIterations) {\n                keepGoing = false;\n                const actionableDelta = 0.0001;\n                for (let i = 0; i < this.points.length - 1; i++) {\n                    let next = (i + 8) % this.points.length;\n                    let deltaV = volts[next] - volts[i];\n                    if (Math.abs(deltaV) < actionableDelta)\n                        continue;\n                    let deltaQ = deltaV * this.invVoltageCoef / 2;\n                    this.charges[i] += deltaQ;\n                    this.charges[next] -= deltaQ;\n                    volts[i] += deltaV;\n                    volts[next] -= deltaV;\n                    updateVoltage(i, deltaQ);\n                    updateVoltage(next, -deltaQ);\n                    keepGoing = true;\n                }\n                iterations++;\n                if (iterations == maxIterations)\n                    console.error(\"Conductor failed to converge\");\n            }\n        };\n        this.sceneRef = scene;\n        this.points = points;\n        this.netCharge = netCharge;\n        this.sphereSize = sphereSize;\n        this.voltageCoef = 1.5 * _constants__WEBPACK_IMPORTED_MODULE_3__[\"default\"].K / this.sphereSize;\n        this.invVoltageCoef = 1 / this.voltageCoef;\n        this.charges = new Array(this.points.length).fill(this.netCharge / this.points.length);\n        this.distanceCache = this.points.map(() => []);\n        for (let x = 0; x < this.points.length; x++) {\n            for (let y = x + 1; y < this.points.length; y++) {\n                let dist = _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"].distance(this.points[x], this.points[y]);\n                this.distanceCache[x][y] = dist;\n                this.distanceCache[y][x] = dist;\n            }\n        }\n        this.updateWorldSpace();\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/conductors/conductor.ts?");

/***/ }),

/***/ "./src/conductors/ring.ts":
/*!********************************!*\
  !*** ./src/conductors/ring.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RingConductor)\n/* harmony export */ });\n/* harmony import */ var _conductor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conductor */ \"./src/conductors/conductor.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../vector */ \"./src/vector.ts\");\n\n\nclass RingConductor extends _conductor__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(mass, position, rotation, detail, radius, sphereSize, scene, netCharge = 0) {\n        let points = [];\n        let pointRadius = radius * 0.95;\n        for (let i = 0; i < detail; i++) {\n            let angle = i / detail * 2 * Math.PI;\n            points.push(new _vector__WEBPACK_IMPORTED_MODULE_1__[\"default\"](pointRadius * Math.cos(angle), pointRadius * Math.sin(angle)));\n        }\n        super(mass, position, rotation, points, sphereSize, scene, netCharge);\n        this.clone = () => new RingConductor(this.mass, this.position.copy(), this.rotation, this.points.length, this.radius, this.sphereSize, this.sceneRef, this.netCharge);\n        this.render = (ctx) => {\n            ctx.strokeStyle = \"grey\";\n            ctx.fillStyle = \"white\";\n            ctx.lineWidth = 10;\n            ctx.beginPath();\n            ctx.arc(this.position.x * 100, this.position.y * 100, this.radius * 100, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.closePath();\n        };\n        this.getType = () => \"ring_conductor\";\n        this.radius = radius;\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/conductors/ring.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst constants = {\n    K: 0.0089875517873681764,\n    G: 6.67408e-11,\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (constants);\n\n\n//# sourceURL=webpack://interactive-em/./src/constants.ts?");

/***/ }),

/***/ "./src/equipotential.ts":
/*!******************************!*\
  !*** ./src/equipotential.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ VoltCanvas)\n/* harmony export */ });\n/* harmony import */ var _charges_point_charge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charges/point_charge */ \"./src/charges/point_charge.ts\");\n/* harmony import */ var _charges_finite_line__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./charges/finite_line */ \"./src/charges/finite_line.ts\");\n/* harmony import */ var _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./charges/infinite_plane */ \"./src/charges/infinite_plane.ts\");\n/* harmony import */ var _charges_triangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./charges/triangle */ \"./src/charges/triangle.ts\");\n/* harmony import */ var _conductors_conductor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./conductors/conductor */ \"./src/conductors/conductor.ts\");\n\n\n\n\n\nclass VoltCanvas {\n    setColors(cols) {\n        window.Object.assign(this.colors, cols);\n        for (let i in this.colors) {\n            let col = this.colors[i];\n            this.gl.uniform4f(this.uniLoc[i], col[0], col[1], col[2], col[3]);\n        }\n    }\n    resize(width, height) {\n        this.gl.uniform2f(this.uniLoc[\"scene\"], width, height);\n        this.gl.uniform2f(this.uniLoc[\"canvas\"], window.innerWidth, window.innerHeight);\n        this.canvas.width = window.innerWidth;\n        this.canvas.height = window.innerHeight;\n        this.gl.viewport(0, 0, window.innerWidth, window.innerHeight);\n    }\n    constructor(canvas) {\n        this.uniLoc = {};\n        this.colors = {\n            \"positive_color\": [1, 0, 0.4, 1],\n            \"negative_color\": [0.3, 0, 1, 1],\n            \"neutral_color\": [0.5, 0, 0.6, 1],\n            \"equipotential_color\": [0.2, 0.8, 0.2, 0.9],\n        };\n        this.updateObjects = (objects) => {\n            let points = objects.filter((obj) => obj instanceof _charges_point_charge__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n            let pointData = new Float32Array(points.length * 3);\n            points.forEach((point, i) => {\n                pointData[i * 3] = point.position.x;\n                pointData[i * 3 + 1] = point.position.y;\n                pointData[i * 3 + 2] = point.charge;\n            });\n            this.gl.uniform1i(this.uniLoc.point_count, points.length);\n            if (points.length > 0)\n                this.gl.uniform3fv(this.uniLoc.point_data, pointData);\n            let lines = objects.filter((obj) => obj instanceof _charges_finite_line__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n            let linePos = new Float32Array(lines.length * 3);\n            let lineData = new Float32Array(lines.length * 2);\n            lines.forEach((line, i) => {\n                linePos[i * 3] = line.position.x;\n                linePos[i * 3 + 1] = line.position.y;\n                linePos[i * 3 + 2] = line.rotation;\n                lineData[i * 2] = line.chargeDensity;\n                lineData[i * 2 + 1] = line.length;\n            });\n            this.gl.uniform1i(this.uniLoc.line_count, lines.length);\n            if (lines.length > 0) {\n                this.gl.uniform2fv(this.uniLoc.line_data, lineData);\n                this.gl.uniform3fv(this.uniLoc.line_pos, linePos);\n            }\n            let planes = objects.filter((obj) => obj instanceof _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n            let planeData = new Float32Array(planes.length * 4);\n            planes.forEach((plane, i) => {\n                planeData[i * 4] = plane.position.x;\n                planeData[i * 4 + 1] = plane.position.y;\n                planeData[i * 4 + 2] = plane.rotation;\n                planeData[i * 4 + 3] = plane.chargeDensity;\n            });\n            this.gl.uniform1i(this.uniLoc.plane_count, planes.length);\n            if (planes.length > 0)\n                this.gl.uniform4fv(this.uniLoc.plane_data, planeData);\n            let tris = objects.filter((obj) => obj instanceof _charges_triangle__WEBPACK_IMPORTED_MODULE_3__[\"default\"]);\n            let triData1 = new Float32Array(tris.length * 4);\n            let triData2 = new Float32Array(tris.length * 3);\n            tris.forEach((tri, i) => {\n                triData1[i * 4 + 0] = tri.position.x;\n                triData1[i * 4 + 1] = tri.position.y;\n                triData1[i * 4 + 2] = tri.rotation;\n                triData1[i * 4 + 3] = tri.halfWidth;\n                triData2[i * 3 + 0] = tri.chargeDensity;\n                triData2[i * 3 + 1] = tri.tip.x;\n                triData2[i * 3 + 2] = tri.tip.y;\n            });\n            this.gl.uniform1i(this.uniLoc.tri_count, tris.length);\n            if (tris.length > 0) {\n                this.gl.uniform4fv(this.uniLoc.tri_data1, triData1);\n                this.gl.uniform3fv(this.uniLoc.tri_data2, triData2);\n            }\n            let conductors = objects.filter((obj) => obj instanceof _conductors_conductor__WEBPACK_IMPORTED_MODULE_4__[\"default\"]);\n            let conductorSizes = new Int32Array(conductors.length);\n            let conductorPointData = new Float32Array(conductors.length * 200 * 3);\n            conductors.forEach((conductor, i) => {\n                conductorSizes[i] = conductor.points.length;\n                conductor.worldSpacePoints.forEach((point, j) => {\n                    let ind = i * 50 * 3 + j * 3;\n                    conductorPointData[ind + 0] = point.x;\n                    conductorPointData[ind + 1] = point.y;\n                    conductorPointData[ind + 2] = conductor.charges[j];\n                });\n            });\n            this.gl.uniform1i(this.uniLoc.conductor_count, conductors.length);\n            if (conductors.length > 0) {\n                this.gl.uniform1iv(this.uniLoc.conductor_sizes, conductorSizes);\n                this.gl.uniform3fv(this.uniLoc.conductor_point_data, conductorPointData);\n            }\n        };\n        this.fullscreenRender = () => {\n            const positionAttributeLocation = this.gl.getAttribLocation(this.program, \"a_position\");\n            const positionBuffer = this.gl.createBuffer();\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, positionBuffer);\n            const positions = [-1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1,];\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(positions), this.gl.STATIC_DRAW);\n            this.gl.enableVertexAttribArray(positionAttributeLocation);\n            this.gl.vertexAttribPointer(positionAttributeLocation, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.drawArrays(this.gl.TRIANGLES, 0, 6);\n        };\n        this.canvas = canvas;\n        this.gl = canvas.getContext(\"webgl2\");\n        if (!this.gl) {\n            alert(\"WebGL not supported\");\n            return;\n        }\n        this.program = this.gl.createProgram();\n        const vertexShader = VoltCanvas.createShader(this.gl, this.gl.VERTEX_SHADER, VoltCanvas.vertexShader);\n        this.gl.attachShader(this.program, vertexShader);\n        const fragmentShader = VoltCanvas.createShader(this.gl, this.gl.FRAGMENT_SHADER, VoltCanvas.fragmentShader);\n        this.gl.attachShader(this.program, fragmentShader);\n        this.gl.linkProgram(this.program);\n        this.gl.useProgram(this.program);\n        VoltCanvas.uniforms.forEach((name) => {\n            this.uniLoc[name] = this.gl.getUniformLocation(this.program, name);\n        });\n        this.setColors({});\n    }\n}\nVoltCanvas.uniforms = [\n    \"point_count\",\n    \"point_data\",\n    \"line_count\",\n    \"line_pos\",\n    \"line_data\",\n    \"plane_count\",\n    \"plane_data\",\n    \"tri_count\",\n    \"tri_data1\",\n    \"tri_data2\",\n    \"conductor_count\",\n    \"conductor_data\",\n    \"conductor_sizes\",\n    \"conductor_point_data\",\n    \"canvas\",\n    \"scene\",\n    \"positive_color\",\n    \"negative_color\",\n    \"neutral_color\",\n    \"equipotential_color\",\n];\nVoltCanvas.createShader = (gl, type, source) => {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    }\n    console.log(\"Shader compilation error\");\n    console.log(gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n};\nVoltCanvas.vertexShader = `#version 300 es\r\n        precision mediump float;\r\n        in vec4 a_position;\r\n        void main() {\r\n            gl_Position = a_position;\r\n        }\r\n    `;\nVoltCanvas.fragmentShader = `#version 300 es\r\n        precision mediump float;\r\n\r\n        uniform vec2 canvas;\r\n        uniform vec2 scene;\r\n\r\n        uniform int point_count;\r\n        uniform vec3 point_data[40];\r\n\r\n        uniform int line_count;\r\n        uniform vec3 line_pos[40];\r\n        uniform vec2 line_data[40];\r\n\r\n        uniform int plane_count;\r\n        uniform vec4 plane_data[20];\r\n\r\n        uniform int tri_count;\r\n        uniform vec4 tri_data1[40];\r\n        uniform vec3 tri_data2[40];\r\n\r\n        uniform int conductor_count;\r\n        uniform int conductor_sizes[20];\r\n        uniform vec3 conductor_point_data[400];\r\n\r\n\r\n        uniform vec4 neutral_color;\r\n        uniform vec4 positive_color;\r\n        uniform vec4 negative_color;\r\n        uniform vec4 equipotential_color;\r\n\r\n        const float contour = 1.0;\r\n\r\n\r\n        float triAD1(vec2 p, float x) {\r\n            float l = sqrt(p.y*p.y/(x*x)+1.0000001);\r\n            return sign(x)*(x*asinh(p.y/x) + p.y/2.0 * log((l+1.0)/(l-1.0)));\r\n        }\r\n        float triAD2(float x, float a, float b) {\r\n            float abx = a+b/x;\r\n            float t = a * (sqrt(abx*abx+1.0)-1.0) / abx;\r\n            float l = sqrt(a*a + 1.0);\r\n            return x * asinh(abx) + b/l * log(abs((t+l+1.0)/(t-l+1.0)));\r\n        }\r\n\r\n        float triADC2(float L, float U, float a, float b) {\r\n            if(sign(L)!=sign(U)) {\r\n                float l = sqrt(a*a+1.0);\r\n                float corr =  sign(a)*abs(b)/l*abs(log(abs((a+l+1.0)/(a-l+1.0)))-log(abs((-a+l+1.0)/(-a-l+1.0))));\r\n                return triAD2(U,a,b)-triAD2(L,a,b) - 2.0*corr;\r\n            }\r\n            return sign(U)*(triAD2(U,a,b)-triAD2(L,a,b));\r\n        }\r\n\r\n        out vec4 fragColor;\r\n        void main() {\r\n            vec2 p = vec2((gl_FragCoord.x/canvas.x-0.5) * scene.x , -(gl_FragCoord.y/canvas.y-0.5) * scene.y);\r\n            float volt = 0.0;\r\n            for(int i = 0; i < point_count; i++) {\r\n                float charge = point_data[i].z;\r\n                float dist = distance(point_data[i].xy, p.xy);\r\n                volt += charge / dist;\r\n            }\r\n            for(int i = 0; i < line_count; i++) {\r\n                float chargeDensity = line_data[i].x;\r\n                float halfLen = line_data[i].y/2.0;\r\n                vec2 center = line_pos[i].xy;\r\n                float rotation = line_pos[i].z;\r\n                vec2 dir = vec2(cos(rotation), sin(rotation));\r\n                vec2 relPos = p - center;\r\n                float g = dot(relPos,dir);\r\n                vec2 end1 = center - dir * halfLen;\r\n                vec2 end2 = center + dir * halfLen;\r\n                halfLen = halfLen * sign(g);\r\n                volt+=sign(g)*chargeDensity*log((distance(p,end1)+abs(g)+halfLen)/(distance(p,end2)+abs(g)-halfLen));\r\n            }\r\n\r\n            for(int i = 0; i < plane_count; i++) {\r\n                float chargeDensity = plane_data[i].w;\r\n                vec2 center = plane_data[i].xy;\r\n                float rotation = plane_data[i].z;\r\n                vec2 dir = vec2(sin(rotation), -cos(rotation));\r\n                vec2 relPos = p - center;\r\n                float dist = abs(dot(relPos,dir));\r\n                volt+=(100.0-6.28317*dist)*chargeDensity;\r\n            }\r\n\r\n            for(int i = 0; i < tri_count; i++) {\r\n                float halfWidth = tri_data1[i].w;\r\n                float rotation = tri_data1[i].z;\r\n                vec2 center = tri_data1[i].xy;\r\n                float chargeDensity = tri_data2[i].x;\r\n                vec2 tip = tri_data2[i].yz;\r\n                float height = 3.0/2.0 * tip.y;\r\n\r\n                vec2 relPos = p - center;\r\n                float cosRot = cos(rotation);\r\n                float sinRot = sin(-rotation);\r\n                relPos = vec2(cosRot * relPos.x - sinRot * relPos.y, sinRot * relPos.x + cosRot * relPos.y);\r\n\r\n                relPos.y+=tip.y/2.0;\r\n                float a1 = height / (tip.x + halfWidth);\r\n                float b1 = (relPos.x + halfWidth) * a1 - relPos.y;\r\n                float a2 = height / (tip.x - halfWidth);\r\n                float b2 = (relPos.x-tip.x) * a2 + height - relPos.y;\r\n\r\n\r\n                float l0 = -halfWidth - relPos.x;\r\n                float l1 = tip.x - relPos.x;\r\n                float l2 = halfWidth - relPos.x;\r\n                volt+=chargeDensity* (triADC2(l0,l1,a1,b1)+ triADC2(l1,l2,a2,b2));\r\n                volt+=chargeDensity*(-triAD1(relPos,l0)+triAD1(relPos,l2));\r\n            }\r\n\r\n            for(int i = 0; i < conductor_count; i++) {\r\n                for(int x = 0; x < conductor_sizes[i]; x++) {\r\n                    int ind = i*50 + x;\r\n                    float charge = conductor_point_data[ind].z/2.0;\r\n                    float dist = max(0.1,distance(conductor_point_data[ind].xy,p.xy));\r\n                    volt += charge / dist;\r\n                    int next = i*50 + (x+1)%conductor_sizes[i];\r\n                    charge = (conductor_point_data[ind].z+conductor_point_data[next].z)/2.0;\r\n                    vec2 point = (conductor_point_data[ind].xy+conductor_point_data[next].xy)/2.0;\r\n                    dist = max(0.1,distance(point,p.xy));\r\n                    volt += charge / dist;\r\n                }\r\n            }\r\n\r\n            float dVolt = 2.0/(1.0+exp(-volt*2.0))-1.0;\r\n            fragColor = mix(mix(neutral_color,negative_color,0.0-dVolt), mix(neutral_color, positive_color, dVolt), step(dVolt, 0.0));\r\n            float dx = dFdx(dVolt);\r\n            float dy = dFdy(dVolt);\r\n            float dv = min(sqrt(abs(dx*dx)+abs(dy*dy)),0.5);\r\n            dVolt*=12.0;\r\n            const float lineWidth = 20.0;\r\n            float fracv = fract(dVolt);\r\n            vec4 vLines = vec4(equipotential_color.rgb,smoothstep(1.0,0.0,min(fracv,1.0-fracv)/dv/lineWidth));\r\n            vLines.a*=equipotential_color.a;\r\n            //Blend with contour line\r\n            fragColor = vec4(fragColor.rgb*(1.0-vLines.a) + vLines.rgb*vLines.a,1.0);\r\n\r\n        }\r\n\r\n    `;\n\n\n//# sourceURL=webpack://interactive-em/./src/equipotential.ts?");

/***/ }),

/***/ "./src/object_editor.ts":
/*!******************************!*\
  !*** ./src/object_editor.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ObjEditor)\n/* harmony export */ });\n/* harmony import */ var _charges_point_charge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./charges/point_charge */ \"./src/charges/point_charge.ts\");\n/* harmony import */ var _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./charges/infinite_plane */ \"./src/charges/infinite_plane.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\n\n\n\n;\nconst noCorrection = {\n    correct: (x) => x,\n    uncorrect: (x) => x,\n};\nconst logCorrection = {\n    correct: (x) => Math.exp(x),\n    uncorrect: (x) => Math.log(x),\n};\nconst powerCorrection = {\n    correct: (x) => Math.sign(x) * Math.pow(Math.abs(x), 2.6),\n    uncorrect: (x) => Math.sign(x) * Math.pow(Math.abs(x), 1 / 2.6),\n};\nconst canMove = [\"point_charge\", \"finite_line\", \"triangle_charge\", \"ring_conductor\"];\nconst canRotate = [\"finite_line\", \"infinite_plane\", \"triangle_charge\", \"conductor\"];\nconst sliders = [\n    {\n        name: \"position\",\n        type: \"vector\", unit: \"m\",\n        min: new _vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](-20, -20), max: new _vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](20, 20),\n        for: \"all\",\n        correction: noCorrection,\n    },\n    {\n        name: \"velocity\",\n        type: \"vector\", unit: \"m/s\",\n        min: new _vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](-20, -20), max: new _vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"](20, 20),\n        for: canMove,\n        correction: powerCorrection,\n    },\n    {\n        name: \"rotation\",\n        type: \"number\", unit: \"rad\",\n        min: -Math.PI, max: Math.PI,\n        for: canRotate,\n        correction: noCorrection,\n    },\n    {\n        name: \"angular_velocity\",\n        type: \"number\", unit: \"rad/s\",\n        min: -1.7, max: 1.7,\n        for: canRotate,\n        correction: powerCorrection,\n    },\n    {\n        name: \"mass\",\n        type: \"number\", unit: \"kg\",\n        min: 0.5, max: 1000,\n        for: canMove,\n        correction: logCorrection,\n    },\n    {\n        name: \"charge\",\n        type: \"number\", unit: \"μC\",\n        min: -3, max: 3,\n        for: [\"point_charge\"],\n        correction: powerCorrection,\n    },\n    {\n        name: \"length\",\n        type: \"number\", unit: \"m\",\n        min: 0.4, max: 20,\n        for: [\"finite_line\"],\n        correction: logCorrection,\n    },\n    {\n        name: \"charge_density\",\n        type: \"number\", unit: \"μC/m\",\n        min: -1.5, max: 1.5,\n        for: [\"finite_line\"],\n        correction: powerCorrection,\n    },\n    {\n        name: \"charge_density\",\n        type: \"number\", unit: \"nC/m²\",\n        min: -40, max: 40,\n        for: [\"infinite_plane\"],\n        correction: powerCorrection,\n    },\n    {\n        name: \"charge_density\",\n        type: \"number\", unit: \"μC/m²\",\n        min: -1.5, max: 1.5,\n        for: [\"triangle_charge\"],\n        correction: powerCorrection,\n    },\n];\nfunction getSliderId(name, type) {\n    return sliders.findIndex((slider) => (slider.name == name && (slider.for == \"all\" || slider.for.includes(type))));\n}\nfunction prettyToString(val) {\n    if (typeof val == \"number\") {\n        let negativeBuffer = val < 0 ? \"\" : \"&nbsp;\";\n        return negativeBuffer + val.toFixed(2);\n    }\n    else\n        return val.toString();\n}\nclass ObjEditor {\n    static correction(value, isNonLinear = false) {\n        if (isNonLinear)\n            return Math.sign(value) * Math.pow(Math.abs(value), 2.6);\n        else\n            return value;\n    }\n    static unCorrection(value, isNonLinear = false) {\n        if (isNonLinear)\n            return Math.sign(value) * Math.pow(Math.abs(value), 1 / 2.6);\n        else\n            return value;\n    }\n    constructor(element, scene) {\n        this.curState = {};\n        this.hideTimeout = -1;\n        this.show = () => {\n            window.clearTimeout(this.hideTimeout);\n            this.element.style.display = \"block\";\n            this.element.clientWidth;\n            this.element.classList.add(\"show\");\n        };\n        this.hide = () => {\n            this.element.classList.remove(\"show\");\n            this.hideTimeout = setTimeout(_ => this.element.style.display = \"none\", 400);\n        };\n        this.generateHTML = () => {\n            let elements = [];\n            for (let i in this.curState) {\n                let id = getSliderId(i, this.curType);\n                let name = sliders[id].name.charAt(0).toUpperCase() + sliders[id].name.slice(1).replace(/_/g, \" \");\n                let html = `<div class=\"input_slider slider_${i}\">`;\n                html += `<div class=\"input_slider_name\">${name}</div>`;\n                html += `<div class=\"input_slider_display\">\r\n                <span class=\"slider_value\" id=\"slider_value${i}\">${prettyToString(this.curState[i])}</span>\r\n                <span class=\"slider_units\">${sliders[id].unit}</span></div>`;\n                let uncorrect = sliders[id].correction.uncorrect;\n                if (sliders[id].type == \"number\") {\n                    if ((sliders[id].name == \"angular_velocity\" || sliders[id].name == \"rotation\") && this.curObj instanceof _charges_point_charge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])\n                        continue;\n                    if (sliders[id].name == \"mass\" && this.curObj instanceof _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n                        continue;\n                    let min = uncorrect(sliders[id].min);\n                    let max = uncorrect(sliders[id].max);\n                    let val = uncorrect(this.curState[i]);\n                    html += `\r\n                    <div class=\"input_slider_range\">\r\n                        <input id=\"slider_range${i}\" type=\"range\" min=\"${min}\" max=\"${max}\" value=\"${val}\" step=\"0.001\" oninput=\"scene.objEditor.input('${i}',this.value)\"/></div>\r\n                `;\n                }\n                else if (sliders[id].type == \"vector\") {\n                    let min = sliders[id].min;\n                    let max = sliders[id].max;\n                    let val = this.curState[i];\n                    html += `\r\n                    <div class=\"input_slider_vector\">\r\n                        <input id=\"range_x${i}\" type=\"range\" min=\"${uncorrect(min.x)}\" max=\"${uncorrect(max.x)}\" step=\"0.001\" value=\"${uncorrect(val.x)}\" oninput=\"scene.objEditor.input('${i}',this.value,'x')\"/>\r\n                        <input id=\"range_y${i}\" type=\"range\" min=\"${uncorrect(min.y)}\" max=\"${uncorrect(max.y)}\" step=\"0.001\" value=\"${uncorrect(val.y)}\" oninput=\"scene.objEditor.input('${i}',this.value,'y')\"/>\r\n                    </div>\r\n                `;\n                }\n                html += \"</div>\";\n                elements.push({ html, id });\n            }\n            elements.sort((a, b) => a.id - b.id);\n            let outHtml = \"\";\n            elements.forEach(v => outHtml += v.html);\n            outHtml += `<div class=\"action_buttons\">\r\n                <button class=\"delete_button\" onclick=\"scene.objEditor.deleteElement()\">&times; Destroy</button>\r\n        </div>`;\n            this.element.innerHTML = outHtml;\n        };\n        this.input = (name, value, direction) => {\n            if (!this.curObj)\n                return;\n            let slider = sliders[getSliderId(name, this.curType)];\n            value = slider.correction.correct(Number(value));\n            value = Math.round(value * 100) / 100;\n            if (name == \"position\") {\n                if (direction == \"x\")\n                    this.curObj.position.x = value;\n                if (direction == \"y\")\n                    this.curObj.position.y = value;\n                this.updateDisplay(\"position\", this.curObj.position, false);\n                this.curObj.updatePosition();\n                return;\n            }\n            else if (name == \"velocity\") {\n                if (direction == \"x\")\n                    this.curObj.velocity.x = value;\n                if (direction == \"y\")\n                    this.curObj.velocity.y = value;\n                this.updateDisplay(\"velocity\", this.curObj.velocity, false);\n                return;\n            }\n            else if (name == \"rotation\") {\n                this.curObj.rotation = value;\n                this.curObj.updateRotation();\n            }\n            else if (name == \"angular_velocity\")\n                this.curObj.angularVelocity = value;\n            else if (name == \"mass\")\n                this.curObj.mass = value;\n            else if (name == \"charge\")\n                this.curObj.charge = value;\n            else if (name == \"length\") {\n                this.curObj.length = value;\n                this.curObj.updatePosition();\n            }\n            else if (name == \"charge_density\") {\n                if (this.curType == \"finite_line\")\n                    this.curObj.chargeDensity = value;\n                else if (this.curType == \"infinite_plane\")\n                    this.curObj.chargeDensity = value / 1000;\n                else if (this.curType == \"triangle_charge\")\n                    this.curObj.chargeDensity = value;\n            }\n            this.scene.updateObjects();\n            this.updateDisplay(name, value, false);\n        };\n        this.updateDisplay = (name, value, setInput = true) => {\n            let slider = sliders[getSliderId(name, this.curType)];\n            if (slider == null)\n                return;\n            let uncorrect = slider.correction.uncorrect;\n            if (value instanceof _vector__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n                document.querySelector(\"#slider_value\" + name).innerHTML = prettyToString(value);\n                let valx = uncorrect(value.x);\n                let valy = uncorrect(value.y);\n                if (setInput)\n                    document.querySelector(\"#range_x\" + name).value = valx.toString();\n                if (setInput)\n                    document.querySelector(\"#range_y\" + name).value = valy.toString();\n            }\n            else if (typeof value == \"number\") {\n                let roundedValue = Math.round(value * 100) / 100;\n                document.querySelector(\"#slider_value\" + name).innerHTML = prettyToString(roundedValue);\n                value = uncorrect(value);\n                if (setInput)\n                    document.querySelector(\"#slider_range\" + name).value = value.toString();\n            }\n        };\n        this.setObj = (obj) => {\n            this.curObj = obj;\n            this.curType = obj.getType();\n            this.curState = {};\n            for (let i = 0; i < sliders.length; i++) {\n                let slider = sliders[i];\n                if (slider.for == \"all\" || slider.for.includes(this.curType)) {\n                    if (slider.name == \"position\")\n                        this.curState[slider.name] = obj.position;\n                    else if (slider.name == \"velocity\")\n                        this.curState[slider.name] = obj.velocity;\n                    else if (slider.name == \"rotation\")\n                        this.curState[slider.name] = obj.rotation;\n                    else if (slider.name == \"angular_velocity\")\n                        this.curState[slider.name] = obj.angularVelocity;\n                    else if (slider.name == \"mass\")\n                        this.curState[slider.name] = obj.mass;\n                    else if (slider.name == \"charge\")\n                        this.curState[slider.name] = obj.charge;\n                    else if (slider.name == \"length\")\n                        this.curState[slider.name] = obj.length;\n                    else if (slider.name == \"charge_density\") {\n                        if (this.curType == \"finite_line\")\n                            this.curState[slider.name] = obj.chargeDensity;\n                        else if (this.curType == \"infinite_plane\")\n                            this.curState[slider.name] = obj.chargeDensity * 1000;\n                        else if (this.curType == \"triangle_charge\")\n                            this.curState[slider.name] = obj.chargeDensity;\n                    }\n                }\n            }\n            this.generateHTML();\n            this.show();\n        };\n        this.deleteElement = () => {\n            if (!this.curObj)\n                return;\n            this.scene.removeObject(this.curObj);\n            this.hide();\n        };\n        this.element = element;\n        this.scene = scene;\n        if (scene.objects[0])\n            this.setObj(scene.objects[0]);\n        else\n            this.hide();\n    }\n}\n\n\n//# sourceURL=webpack://interactive-em/./src/object_editor.ts?");

/***/ }),

/***/ "./src/scene.ts":
/*!**********************!*\
  !*** ./src/scene.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Scene)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"./src/base.ts\");\n/* harmony import */ var _conductors_conductor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conductors/conductor */ \"./src/conductors/conductor.ts\");\n/* harmony import */ var _charges_finite_line__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./charges/finite_line */ \"./src/charges/finite_line.ts\");\n/* harmony import */ var _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./charges/infinite_plane */ \"./src/charges/infinite_plane.ts\");\n/* harmony import */ var _charges_point_charge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./charges/point_charge */ \"./src/charges/point_charge.ts\");\n/* harmony import */ var _charges_triangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./charges/triangle */ \"./src/charges/triangle.ts\");\n/* harmony import */ var _conductors_ring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./conductors/ring */ \"./src/conductors/ring.ts\");\n/* harmony import */ var _vector__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./vector */ \"./src/vector.ts\");\n/* harmony import */ var _equipotential__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./equipotential */ \"./src/equipotential.ts\");\n/* harmony import */ var _object_editor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./object_editor */ \"./src/object_editor.ts\");\n\n\n\n\n\n\n\n\n\n\nclass Scene {\n    static getChargeColor(charge) {\n        if (charge < 0)\n            return Scene.colors.negative;\n        if (charge > 0)\n            return Scene.colors.positive;\n        return Scene.colors.neutral;\n    }\n    constructor(element, voltCanvas, objectEditor) {\n        this.updateAspectRatio = () => {\n            let aspectRatio = window.innerWidth / window.innerHeight;\n            this.height = Scene.parameters.viewportHeight * 2;\n            this.width = aspectRatio * this.height;\n            this.element.width = window.innerWidth;\n            this.element.height = window.innerHeight;\n            this.context.resetTransform();\n            this.context.translate(window.innerWidth / 2, window.innerHeight / 2);\n            let scale = window.innerHeight / 2 / Scene.parameters.viewportHeight / 100;\n            this.context.scale(scale, scale);\n            this.voltCanvas.resize(this.width, this.height);\n        };\n        this.sceneDefaults = () => {\n            this.context.font = \"bold 30px Lato\";\n            this.context.textAlign = \"center\";\n            this.context.textBaseline = \"middle\";\n        };\n        this.getCursorPosition = (event) => {\n            let rect = this.element.getBoundingClientRect();\n            let x = event.clientX - rect.left - this.element.width / 2;\n            let y = event.clientY - rect.top - this.element.height / 2;\n            let aspectRatio = this.element.width / this.element.height;\n            return new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](x / this.element.width * 2 * Scene.parameters.viewportHeight * aspectRatio, y / this.element.height * 2 * Scene.parameters.viewportHeight);\n        };\n        this.pushDefaultObject = (type) => {\n            this.pushObject(Scene.defaultObjects[type].clone());\n        };\n        this.render = () => {\n            requestAnimationFrame(this.render);\n            this.context.clearRect(-100 * this.width, -100 * this.height, this.width * 200, this.height * 200);\n            this.voltCanvas.fullscreenRender();\n            if (Scene.parameters.showGridLines)\n                this.renderGridLines();\n            if (Scene.parameters.showVectorGrid)\n                this.renderVectorField();\n            this.objects.forEach((object) => {\n                object.render(this.context);\n            });\n        };\n        this.renderGridLines = () => {\n            this.context.lineWidth = 1.5;\n            this.context.strokeStyle = Scene.colors.gridLines;\n            this.context.beginPath();\n            for (let i = Math.floor(-this.width); i < this.width; i++) {\n                this.context.moveTo(i * 100, -this.height * 100);\n                this.context.lineTo(i * 100, this.height * 100);\n            }\n            for (let i = Math.floor(-this.height); i < this.height; i++) {\n                this.context.moveTo(-this.width * 100, i * 100);\n                this.context.lineTo(this.width * 100, i * 100);\n            }\n            this.context.stroke();\n            this.context.closePath();\n        };\n        this.renderVectorField = () => {\n            this.context.strokeStyle = Scene.colors.fieldLines;\n            this.context.lineCap = \"round\";\n            for (let i = Math.floor(-this.width - 1); i < this.width + 1; i += 2) {\n                for (let j = Math.floor(-this.height - 1); j < this.height + 1; j += 2) {\n                    let pos = new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](i, j);\n                    let field = this.fieldAt(pos);\n                    let fieldMag = field.magnitude();\n                    if (fieldMag > 0.0001) {\n                        this.context.beginPath();\n                        let unit = field.unit();\n                        let len = 1 / (1 + Math.exp(-fieldMag * 1000)) - 0.5;\n                        if (Scene.parameters.debugField)\n                            len = 1;\n                        let size = Math.abs(len) * 20;\n                        this.context.lineWidth = size;\n                        let fieldEnd = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].add(pos, _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].multiply(unit, len));\n                        let normal = new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](-unit.y * size, unit.x * size);\n                        let along = new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](unit.x * size, unit.y * size);\n                        this.context.moveTo(pos.x * 100, pos.y * 100);\n                        this.context.lineTo(fieldEnd.x * 100, fieldEnd.y * 100);\n                        this.context.moveTo(fieldEnd.x * 100, fieldEnd.y * 100);\n                        this.context.lineTo(fieldEnd.x * 100 - along.x + normal.x, fieldEnd.y * 100 - along.y + normal.y);\n                        this.context.moveTo(fieldEnd.x * 100, fieldEnd.y * 100);\n                        this.context.lineTo(fieldEnd.x * 100 - along.x - normal.x, fieldEnd.y * 100 - along.y - normal.y);\n                        if (Scene.parameters.debugField) {\n                            this.context.moveTo(pos.x * 100, pos.y * 100);\n                            this.context.lineTo(pos.x * 100 + normal.x, pos.y * 100 + normal.y);\n                            this.context.moveTo(pos.x * 100, pos.y * 100);\n                            this.context.lineTo(pos.x * 100 - normal.x, pos.y * 100 - normal.y);\n                        }\n                        this.context.stroke();\n                        this.context.closePath();\n                    }\n                }\n            }\n        };\n        this.fieldAt = (pos, ignored) => {\n            let out = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].origin();\n            this.objects.forEach((object) => {\n                if (object == ignored)\n                    return;\n                out.add(object.fieldAt(pos));\n            });\n            return out;\n        };\n        this.voltageAt = (pos, ignored) => {\n            let potential = 0;\n            this.objects.forEach((object) => {\n                if (object == ignored)\n                    return;\n                potential += object.voltageAt(pos);\n            });\n            return potential;\n        };\n        this.physics = (dt) => {\n            this.objects.forEach((object) => {\n                object.incrementPosition(dt);\n                if (object.position.x > 100 || object.position.x < -100 || object.position.y > 100 || object.position.y < -100) {\n                    this.removeObject(object);\n                    return;\n                }\n                if (object == this.selected.obj) {\n                    this.objEditor.updateDisplay(\"position\", object.position);\n                    this.objEditor.updateDisplay(\"rotation\", object.rotation);\n                }\n            });\n            this.updateObjects();\n        };\n        this.forceBetween = (a, b) => {\n            if (a instanceof _charges_point_charge__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            }\n            return { force: _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].origin(), torque: 0 };\n        };\n        this.selected = { dragPositions: [_vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].origin()], obj: null, dragTime: [0], posOffset: null, isGrab: false };\n        this.mouseDown = (event) => {\n            let objEditorRect = this.objEditor.element.getBoundingClientRect();\n            if (event.clientX > objEditorRect.left && event.clientY < objEditorRect.bottom && event.clientY > objEditorRect.top)\n                return;\n            this.selected.dragPositions = [this.getCursorPosition(event)];\n            this.selected.dragTime = [new Date().getTime()];\n            for (let i = 0; i < this.objects.length; i++) {\n                if (this.objects[i].distanceFrom(this.selected.dragPositions[0]) < 0.5) {\n                    this.selected.obj = this.objects[i];\n                    this.selected.obj.velocity = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].origin();\n                    this.objEditor.setObj(this.objects[i]);\n                    this.selected.isGrab = true;\n                    this.selected.posOffset = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].subtract(this.selected.obj.position, this.selected.dragPositions[0]);\n                    return;\n                }\n            }\n            this.objEditor.hide();\n        };\n        this.mouseMove = (event) => {\n            if (this.selected.isGrab == false)\n                return;\n            let pos = this.getCursorPosition(event);\n            this.selected.dragPositions.push(pos);\n            pos = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].add(pos, this.selected.posOffset);\n            if (this.selected.dragPositions.length >= 10) {\n                this.selected.dragPositions.shift();\n                this.selected.dragTime.shift();\n            }\n            this.selected.obj.position = pos;\n            this.selected.obj.updatePosition();\n            this.objEditor.updateDisplay(\"position\", pos);\n            this.updateObjects();\n            this.selected.dragTime.push(new Date().getTime());\n        };\n        this.mouseUp = (event) => {\n            if (this.selected.isGrab == false)\n                return;\n            this.selected.isGrab = false;\n            if (this.selected.obj.getType() == \"infinite_plane\")\n                return;\n            let pos = this.getCursorPosition(event);\n            if (new Date().getTime() - this.selected.dragTime[this.selected.dragTime.length - 1] < 60) {\n                let dt = new Date().getTime() - this.selected.dragTime[0];\n                let dx = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].add(pos, _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].multiply(this.selected.dragPositions[0], -1));\n                this.selected.obj.velocity = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].multiply(dx, 1000 / dt);\n            }\n            else\n                this.selected.obj.velocity = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"].origin();\n            this.objEditor.updateDisplay(\"velocity\", this.selected.obj.velocity);\n            this.updateObjects();\n        };\n        this.objects = [];\n        this.element = element;\n        this.context = element.getContext(\"2d\");\n        this.voltCanvas = new _equipotential__WEBPACK_IMPORTED_MODULE_8__[\"default\"](voltCanvas);\n        this.updateAspectRatio();\n        this.sceneDefaults();\n        this.render();\n        this.physicsInterval = window.setInterval(this.physics, 1000 / Scene.parameters.physicsPerSecond, 1 / Scene.parameters.physicsPerSecond);\n        this.objEditor = new _object_editor__WEBPACK_IMPORTED_MODULE_9__[\"default\"](objectEditor, this);\n    }\n    pushObject(object) {\n        this.objects.push(object);\n        this.updateObjects();\n    }\n    updateObjects() {\n        this.voltCanvas.updateObjects(this.objects);\n    }\n    removeObject(object) {\n        this.objects.splice(this.objects.indexOf(object), 1);\n        this.updateObjects();\n    }\n}\nScene.parameters = {\n    viewportHeight: 10,\n    physicsPerSecond: 100,\n    timeSpeed: 1,\n    showGridLines: true,\n    showVectorGrid: true,\n    debugField: false,\n};\nScene.colors = {\n    background: \"#ffffff\",\n    gridLines: \"#666666\",\n    neutral: \"#000000\",\n    positive: \"#ff0000\",\n    negative: \"#0000ff\",\n    equipotential: \"#ff0000\",\n    fieldLines: \"#cccccc\",\n};\nvar scene;\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    let canvas = document.getElementById(\"canvas\");\n    let voltCanvas = document.getElementById(\"volt_canvas\");\n    let objectEditor = document.querySelector(\"#properties\");\n    scene = new Scene(canvas, voltCanvas, objectEditor);\n    window.scene = scene;\n    Scene.defaultObjects = {\n        \"point_charge\": new _charges_point_charge__WEBPACK_IMPORTED_MODULE_4__[\"default\"](1, 1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0)),\n        \"infinite_plane\": new _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_3__[\"default\"](0.02, 1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0)),\n        \"finite_line\": new _charges_finite_line__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0.4, 1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0), 0, 10),\n        \"triangle\": new _charges_triangle__WEBPACK_IMPORTED_MODULE_5__[\"default\"](1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0), 0, 1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0), new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 1), new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](1, 0)),\n        \"ring_conductor\": new _conductors_ring__WEBPACK_IMPORTED_MODULE_6__[\"default\"](1, new _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"](0, 0), 0, 30, 2, 0.1, window.scene, 0),\n    };\n    scene.updateObjects();\n    window.addEventListener(\"mousedown\", scene.mouseDown);\n    window.addEventListener(\"mouseup\", scene.mouseUp);\n    window.addEventListener(\"mousemove\", scene.mouseMove);\n});\nwindow.addEventListener(\"resize\", () => {\n    scene.updateAspectRatio();\n    scene.sceneDefaults();\n});\nwindow.Scene = Scene;\nwindow.Base = _base__WEBPACK_IMPORTED_MODULE_0__.Object;\nwindow.PointCharge = _charges_point_charge__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\nwindow.FiniteLine = _charges_finite_line__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\nwindow.InfinitePlane = _charges_infinite_plane__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\nwindow.Vector = _vector__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\nwindow.Conductor = _conductors_conductor__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n\n\n//# sourceURL=webpack://interactive-em/./src/scene.ts?");

/***/ }),

/***/ "./src/vector.ts":
/*!***********************!*\
  !*** ./src/vector.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Vector)\n/* harmony export */ });\nclass Vector {\n    constructor(x, y) {\n        this.isZero = () => {\n            return this.x === 0 && this.y === 0;\n        };\n        this.magnitude = () => {\n            return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n        };\n        this.unit = () => {\n            return Vector.multiply(this, 1 / this.magnitude());\n        };\n        this.copy = () => {\n            return new Vector(this.x, this.y);\n        };\n        this.add = (v) => {\n            this.x += v.x;\n            this.y += v.y;\n        };\n        this.rotate = (angle) => {\n            let sin = Math.sin(angle);\n            let cos = Math.cos(angle);\n            let x = this.x * cos - this.y * sin;\n            let y = this.x * sin + this.y * cos;\n            this.x = x;\n            this.y = y;\n        };\n        this.rotateByVector = (vec) => {\n            let uVec = vec.unit();\n            let sin = uVec.y;\n            let cos = uVec.x;\n            let x = this.x * cos - this.y * sin;\n            let y = this.x * sin + this.y * cos;\n            this.x = x;\n            this.y = y;\n        };\n        this.x = x;\n        this.y = y;\n    }\n    toString() {\n        return `<${this.x.toFixed(2)}, ${this.y.toFixed(2)}>`;\n    }\n}\nVector.add = (a, b) => {\n    return new Vector(a.x + b.x, a.y + b.y);\n};\nVector.subtract = (a, sub) => {\n    return new Vector(a.x - sub.x, a.y - sub.y);\n};\nVector.multiply = (a, scalar) => {\n    return new Vector(a.x * scalar, a.y * scalar);\n};\nVector.distance = (a, b) => {\n    return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));\n};\nVector.dot = (a, b) => {\n    return a.x * b.x + a.y * b.y;\n};\nVector.cross2D = (a, b) => {\n    return a.x * b.y - a.y * b.x;\n};\nVector.scalarProject = (a, targetVector) => {\n    return Vector.dot(a, targetVector) / targetVector.magnitude();\n};\nVector.project = (a, targetVector) => {\n    return Vector.multiply(targetVector.unit(), Vector.scalarProject(a, targetVector));\n};\nVector.rotationMatrix = (angle) => {\n    return [[Math.cos(angle), -Math.sin(angle)], [Math.sin(angle), Math.cos(angle)]];\n};\nVector.transform = (a, matrix) => {\n    return new Vector(a.x * matrix[0][0] + a.y * matrix[0][1], a.x * matrix[1][0] + a.y * matrix[1][1]);\n};\nVector.fromArray = (a) => {\n    return new Vector(a[0], a[1]);\n};\nVector.rHat = (pos, chargePos) => {\n    return Vector.subtract(pos, chargePos).unit();\n};\nVector.inverseSquareField = (pos, chargePos) => {\n    return Vector.multiply(Vector.rHat(pos, chargePos), 1 / Math.pow(Vector.distance(pos, chargePos), 2));\n};\nVector.origin = () => {\n    return new Vector(0, 0);\n};\n;\n\n\n//# sourceURL=webpack://interactive-em/./src/vector.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scene.ts");
/******/ 	
/******/ })()
;